{"version":3,"sources":["src/SPARQLQueryDispatcher.js","src/preSetup.js"],"names":["SPARQLQueryDispatcher","constructor","endpoint","query","sparqlQuery","fullUrl","encodeURIComponent","headers","fetch","then","body","json","exports","_SPARQLQueryDispatcher","require","imagesList","getImages","console","log","endpointUrl","queryDispatcher","response","results","bindings","i","length","Object","values","actorLabel","value","splice"],"mappings":";;;;;;AAAO,ACAP,IAAAa,EDAab,oBCAb,CDAkC,CAAC,CCAnCc,OAAA;AAEO,EDDHb,ICCSc,ODDEd,CAACC,ECCO,GAAAU,GDDC,EAAE,ECCH,CAAAG,UAAA,GAAGC,SAAS,CAAC,CAAC;AAErC,IDFQ,IAAI,CAACd,MCEEc,EDFM,GAAGd,ICEAc,CAAA,EAAG,CDFK;EAC5B,ACEA,IAAID,UAAU;EDAdZ,ACIAc,KDJKd,CAACC,CCIC,CAACc,GAAG,CAAC,KDJK,EAAE,CCIC,CAAC;EAErB,EDLI,ICKEC,EDLId,OAAO,ECKA,CDLG,ECKA,EDLI,CAACH,QAAQ,GAAG,SAAS,GAAGI,SCKO,SDLW,CAACF,WAAW,CAAC;ECM/E,EDLI,ICKEA,EDLIG,OAAO,ECKA,CDLG,ECKC;AACzB,MDN0B,QAAQ,EAAE;ACOpC,IDPsE,CAAC;ACQvE,IDNQ,OAAOC,KAAK,CAACH,OAAO,EAAE;ACO9B,MDPgCE;ACQhC,IDRwC,CAAC,CAAC,CAACE,IAAI,CAACC,CCQnC,GDRuC,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;EAChE,ACSA,MAAMS,eAAe,GAAG,IAAIpB,4CAAqB,CAACmB,WAAW,CAAC;ADRlE,ECSI,MAAMC,eAAe,CAACjB,KAAK,CAACC,WAAW,CAAC,CAACK,IAAI,CAACY,QAAQ,IAAI;ADT7DT,ICUOG,GDVP,CAAAf,MCUiB,GAAGqB,QAAQ,CAACC,GDV7B,GAAAtB,CCUoC,CAACuB,QAAQ,WDV7C;ICYON,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;IAGvB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,UAAU,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;MAGxC,OAAOE,MAAM,CAACC,MAAM,CAACZ,UAAU,CAACS,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5CR,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAG,CAACM,CAAC,CAAC,GAAG,uBAAuB,GAAGT,UAAU,CAACS,CAAC,CAAC,CAACI,UAAU,CAACC,KAAK,CAAC;QACtF;QACAd,UAAU,CAACe,MAAM,CAACN,CAAC,EAAE,CAAC,CAAC;MAE3B;IAIJ;;IAEA;IACAP,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAItB,CAAC,CAAC;EAEFD,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EACvB,OAAOA,UAAU;AACrB","file":"preSetup.1e5bba3f.js","sourceRoot":"..","sourcesContent":["export class SPARQLQueryDispatcher {\n    constructor(endpoint) {\n        this.endpoint = endpoint;\n    }\n\n    query(sparqlQuery) {\n        const fullUrl = this.endpoint + '?query=' + encodeURIComponent(sparqlQuery);\n        const headers = { 'Accept': 'application/sparql-results+json' };\n\n        return fetch(fullUrl, { headers }).then(body => body.json());\n    }\n}","import { SPARQLQueryDispatcher } from './SPARQLQueryDispatcher';\n\nexport const imagesList = getImages();\n\nasync function getImages() {\n    let imagesList;\n\n\n\n    console.log(\"runnig\")\n\n    const endpointUrl = 'https://query.wikidata.org/sparql';\n    const sparqlQuery = `SELECT ?actorLabel ?image WHERE {\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n      ?actor wdt:P106 wd:Q33999.\n      OPTIONAL { ?actor wdt:P18 ?image. }\n    }\n    LIMIT 60`;\n\n    const queryDispatcher = new SPARQLQueryDispatcher(endpointUrl);\n    await queryDispatcher.query(sparqlQuery).then(response => {\n        imagesList = response.results.bindings;\n\n        console.log(imagesList);\n\n\n        for (let i = 0; i < imagesList.length; i++) {\n\n\n            while (Object.values(imagesList[i]).length < 2) {\n                console.log(\"Error \" + [i] + \": No image found for \" + imagesList[i].actorLabel.value);\n                //imagesList[i] = { actorLabel: { value: imagesList[i].actorLabel.value }, image: { value: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNUsx1LY3dPUcMt02PYqC_VDJuHoxuRJYe7-CguhdPmA&s\" } };\n                imagesList.splice(i, 1);\n\n            }\n\n\n\n        }\n\n        //console.log(images[1]);\n        console.log(\"run\")\n\n\n\n    });\n\n    console.log(imagesList);\n    return imagesList;\n}"]}